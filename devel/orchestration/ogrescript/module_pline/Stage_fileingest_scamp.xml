  <target name="Stage_fileingest_scamp" description="ingest to the Files table before scamp stage">
    <esequence>

        <edeclare name="content_begin"  string="test begin"/>
        <edeclare name="content_end"    string="test end"/>
        <econdblock type="else-if">
          <econdtask>
            <eeval>
             <statement>
                <ecompare string="${platform}">
                   <predicate string="TG" comparator="EQUALS"/>
                </ecompare>
             </statement>
            </eeval>
              <esequence>
                <eassign name="content_begin"  string="Begin Stage_fileingest_scamp for ccd ${ccd.num} data on $G{host} for nite ${nite}"/>
                <eassign name="content_end"    string="End Stage_fileingest_scamp for ccd ${ccd.num} data on $G{host} for nite ${nite}"/>
              </esequence>
          </econdtask>
              <esequence>
                <eassign name="content_begin"  string="Begin Stage_fileingest_scamp for ccd ${ccd.num} for nite ${nite}"/>
                <eassign name="content_end"    string="End Stage_fileingest_scamp for ccd ${ccd.num} for nite ${nite}"/>
              </esequence>
        </econdblock>

            <publish>
              <event ensembleid="${ensemble.id}" workflowid="${jid}"
                   nodeid="$R{content_begin}" currentState="1">
                   <property name="message" value="$R{content_begin}"/>
              </event>
            </publish>

     <print line=" -- Begin Stage_fileingest_scamp for CCD ${ccd.num}"/>

      <edeclare name="list.dir" string="${local.out}"/>
      <property name="source" value="file://${job.id}"/>

      <delete file="${inputscamp.list}" quiet="true"/>
      <delete file="${outputscamp.dat}" quiet="true"/>

      <eloop counterName="i">
          <ecounter>
               <expression infix="$R{i} &lt; 4"/>
          </ecounter>

        <econdblock type="else-if">
          <econdtask>
            <eeval>
               <statement>
                 <ecompare long="0">
                       <predicate long="$R{i}" comparator="EQUALS"/>
                   </ecompare>
                 </statement>
            </eeval>
                <edeclare globalname="band" string="g"/>
          </econdtask>
        </econdblock>

        <econdblock type="else-if">
          <econdtask>
            <eeval>
               <statement>
                 <ecompare long="1">
                       <predicate long="$R{i}" comparator="EQUALS"/>
                   </ecompare>
                 </statement>
            </eeval>
                <edeclare globalname="band" string="r"/>
          </econdtask>
        </econdblock>

        <econdblock type="else-if">
          <econdtask>
            <eeval>
               <statement>
                 <ecompare long="2">
                       <predicate long="$R{i}" comparator="EQUALS"/>
                   </ecompare>
                 </statement>
            </eeval>
                <edeclare globalname="band" string="i"/>
          </econdtask>
        </econdblock>

        <econdblock type="else-if">
          <econdtask>
            <eeval>
               <statement>
                 <ecompare long="3">
                       <predicate long="$R{i}" comparator="EQUALS"/>
                   </ecompare>
                 </statement>
            </eeval>
                <edeclare globalname="band" string="z"/>
          </econdtask>
        </econdblock>

        <print line=" -- doing $G{band}-band ..."/>

        <edeclare name="source1" string="data/${nite}/$G{band}/"/>

        <edeclare globalName="sourcePattern2">
          <uripattern baseUri="${source}/$R{source1}">
              <nestedelement include="*"/>
          </uripattern>
        </edeclare>
        <edeclare name="dirlist" null="true"/>
        <urilist fullScan="true">
           <nestedelement pattern="$G{sourcePattern2}"/>
             <configuration>
                 <attribute name="retainFiles"       value="false"/>
                 <attribute name="retainDirectories" value="true"/>
                 <attribute name="getNames" value="true"/>
             </configuration>
        </urilist>
        <ereturn name="dirlist" get="simpleResult"/>

        <eloop counterName="w">
          <ecounter>
               <expression infix="$R{w} &lt; $R{dirlist$I{L}}"/>
          </ecounter>

           <edeclare globalName="sourcePattern1">
             <uripattern baseUri="${source}/$R{source1}/$R{dirlist$I{$R{w}}}">
               <nestedelement include="${fitspattern_scamp}"/>
             </uripattern>
           </edeclare>
           <edeclare name="filelist" null="true"/>
           <urilist fullScan="true">
             <nestedelement pattern="$G{sourcePattern1}"/>
               <configuration>
                 <attribute name="retainFiles"       value="true"/>
                 <attribute name="retainDirectories" value="false"/>
                 <attribute name="getNames" value="true"/>
               </configuration>
           </urilist>
           <ereturn name="filelist" get="simpleResult"/>

           <econdblock type="else-if">
             <econdtask>
              <eeval>
               <statement>
                 <ecompare long="0">
                       <predicate long="$R{filelist$I{L}}" comparator="LT"/>
                   </ecompare>
                 </statement>
              </eeval>
                <esequence>
                   <eloop counterName="v">
                     <ecounter>
                       <expression infix="$R{v} &lt; $R{filelist$I{L}}"/>
                     </ecounter>

                     <print line=" * Found $R{source1}$R{dirlist$I{$R{w}}}/$R{filelist$I{$R{v}}}"/>

                     <write path="${inputscamp.list}" text="true"
                        errorProperty="failed" rethrow="false" append="true">
                       <segment string="${jid}/$R{source1}$R{dirlist$I{$R{w}}}/$R{filelist$I{$R{v}}}" lineBreaks="1" />
                     </write>

                   </eloop>
                </esequence>
             </econdtask>
           </econdblock>

        </eloop>
      </eloop>

      </esequence>

      <esequence>
      <print line=" "/>
      <print line=" -- ingesting ${outputscamp.dat} into ${files.table} table."/>

      <rtexec inheritedEnv="false" execDir="${base.dir}"
                args="${imageingest.exec} ${imageingest_scamp.args}" quiet="true">
            <outMonitor file="${imageingest_scamp.log}"/>
      </rtexec>

      <edeclare name="ingest.dat" string="${outputscamp.dat}"/>
      <edeclare name="control.file" string="${file.control.file}"/>
      <edeclare name="sqlldr.log" string="${file.sqlldr.log}"/>
      <edeclare name="sqlldr.bad" string="${file.sqlldr.bad}"/>

       <write path="$R{control.file}" text="true"
           errorProperty="failed" rethrow="false">
         <segment string="Load data" lineBreaks="1" />
         <segment string="append into table ${files.table}" lineBreaks="1" />
         <segment string="FIELDS TERMINATED BY '|'" lineBreaks="1" />
         <segment string="trailing nullcols(" lineBreaks="1" />
         <segment string="RA        decimal external," lineBreaks="1" />
         <segment string="DEC       decimal external," lineBreaks="1" />
         <segment string="RADECEQ   decimal external," lineBreaks="1" />
         <segment string="File_Date char ," lineBreaks="1" />
         <segment string="GAIN_A    decimal external," lineBreaks="1" />
         <segment string="RDNOISE_A decimal external," lineBreaks="1" />
         <segment string="GAIN_B    decimal external," lineBreaks="1" />
         <segment string="RDNOISE_B decimal external," lineBreaks="1" />
         <segment string="Airmass   decimal external," lineBreaks="1" />
         <segment string="Band      char ," lineBreaks="1" />
         <segment string="ImageType char ," lineBreaks="1" />
         <segment string="IMAGENAME char ," lineBreaks="1" />
         <segment string="RUNIDDESC char ," lineBreaks="1" />
         <segment string="TILENAME  char ," lineBreaks="1" />
         <segment string="Nite      char ," lineBreaks="1" />
         <segment string="CCD_Number integer external," lineBreaks="1" />
         <segment string="exptime    decimal external," lineBreaks="1" />
         <segment string="DARKTIME   decimal external," lineBreaks="1" />
         <segment string="OBJECT      char ," lineBreaks="1" />
         <segment string="OBSERVATORY char ," lineBreaks="1" />
         <segment string="TELESCOPE   char ," lineBreaks="1" />
         <segment string="HOURANGLE   char ," lineBreaks="1" />
         <segment string="ZENITHD     char ," lineBreaks="1" />
         <segment string="DETECTOR    char ," lineBreaks="1" />
         <segment string="OBSERVER    char ," lineBreaks="1" />
         <segment string="PROPID      char ," lineBreaks="1" />
         <segment string="WEATHERDATE char ," lineBreaks="1" />
         <segment string="WINDSPD     char ," lineBreaks="1" />
         <segment string="WINDDIR     char ," lineBreaks="1" />
         <segment string="AMBTEMP     char ," lineBreaks="1" />
         <segment string="HUMIDITY    char ," lineBreaks="1" />
         <segment string="PRESSURE    char ," lineBreaks="1" />
         <segment string="DIMMSEEING  char ," lineBreaks="1" />
         <segment string="EQUINOX   decimal external," lineBreaks="1" />
         <segment string="WCSDIM    integer external," lineBreaks="1" />
         <segment string="CTYPE1  char ," lineBreaks="1" />
         <segment string="CTYPE2  char ," lineBreaks="1" />
         <segment string="CRVAL1    decimal external," lineBreaks="1" />
         <segment string="CRVAL2    decimal external," lineBreaks="1" />
         <segment string="CRPIX1    decimal external," lineBreaks="1" />
         <segment string="CRPIX2    decimal external," lineBreaks="1" />
         <segment string="CD1_1    decimal external," lineBreaks="1" />
         <segment string="CD2_1    decimal external," lineBreaks="1" />
         <segment string="CD1_2    decimal external," lineBreaks="1" />
         <segment string="CD2_2    decimal external," lineBreaks="1" />
         <segment string="PV1_0    decimal external," lineBreaks="1" />
         <segment string="PV1_1    decimal external," lineBreaks="1" />
         <segment string="PV1_2    decimal external," lineBreaks="1" />
         <segment string="PV1_3    decimal external," lineBreaks="1" />
         <segment string="PV1_4    decimal external," lineBreaks="1" />
         <segment string="PV1_5    decimal external," lineBreaks="1" />
         <segment string="PV1_6    decimal external," lineBreaks="1" />
         <segment string="PV1_7    decimal external," lineBreaks="1" />
         <segment string="PV1_8    decimal external," lineBreaks="1" />
         <segment string="PV1_9    decimal external," lineBreaks="1" />
         <segment string="PV1_10   decimal external," lineBreaks="1" />
         <segment string="PV2_0    decimal external," lineBreaks="1" />
         <segment string="PV2_1    decimal external," lineBreaks="1" />
         <segment string="PV2_2    decimal external," lineBreaks="1" />
         <segment string="PV2_3    decimal external," lineBreaks="1" />
         <segment string="PV2_4    decimal external," lineBreaks="1" />
         <segment string="PV2_5    decimal external," lineBreaks="1" />
         <segment string="PV2_6    decimal external," lineBreaks="1" />
         <segment string="PV2_7    decimal external," lineBreaks="1" />
         <segment string="PV2_8    decimal external," lineBreaks="1" />
         <segment string="PV2_9    decimal external," lineBreaks="1" />
         <segment string="PV2_10   decimal external," lineBreaks="1" />
         <segment string="NPIX1    integer external," lineBreaks="1" />
         <segment string="NPIX2    integer external," lineBreaks="1" />
         <segment string="NEXTEND  integer external," lineBreaks="1" />
         <segment string="IMAGEID &quot;${files.index}_seq.nextval&quot;," lineBreaks="1" />
         <segment string="HTMID    integer &quot;fEqToHtm(:RA,:DEC)&quot;," lineBreaks="1" />
         <segment string="CX       decimal external &quot;fEqToX(:RA, :DEC)&quot;," lineBreaks="1" />
         <segment string="CY       decimal external &quot;fEqToY(:RA, :DEC)&quot;," lineBreaks="1" />
         <segment string="CZ       decimal external &quot;fEqToZ(:RA, :DEC)&quot;)" lineBreaks="1" />

       </write>

       <rtexec inheritedEnv="false" execDir="${user.dir}"
                args="${sqlldr.exec} ${sqlldr.command}" quiet="true">
       </rtexec>

       <print line=" -- Stage_fileingest_scamp done"/>

         <publish>
            <event ensembleid="${ensemble.id}" workflowid="${jid}"
                   nodeid="$R{content_end}" currentState="1">
                  <property name="message" value="$R{content_end}"/>
            </event>
         </publish>

       </esequence>
  </target>
