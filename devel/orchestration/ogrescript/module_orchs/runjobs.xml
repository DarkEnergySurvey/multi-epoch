<define procedure="Stage_runjobs" ARG_0="int">
    <properties file="${mypath}/module_orchs/runjobs.properties"/>
    <env/>
    <properties sysprops="true"/>
    <send>
        <progress-event message="Begin Stage_runjobs">
            <header-property name="some-special-id" value="${ensemble.id}-Main-Begin-Stage_runjobs"/>
        </progress-event>
    </send>
    <echo stdout="true" message=" - Begin Stage_runjobs"/>
    <declare name="appbase" string="${user.dir}"/>
    <if>
        <equals first="${platform}" second="TG"/>
        <echo stdout="true" message=" -- Running parallel jobs for ${project} pipeline"/>
        <echo stdout="true" message=" -- Submit jobs to the TeraGrid "/>
<!--
            <declare name="globus_location"     null="true"/>
            <getsysprop name="globus.location"/>
            <return name="globus_location"      get="value"/>
-->
        <declare name="appbase" string="${user.dir}"/>
        <declare name="currentuser" string="${user.name}"/>
        <declare name="condorsubmit" string="${globus_location}/bin/condor_submit"/>
        <declare name="condorq" string="${globus_location}/bin/condor_q"/>
        <declare name="mxc" string="maxCputime=${maxcputime}"/>
        <declare name="mxw" string="maxWallTime=${maxwalltime}"/>
        <declare name="fastio" string="host_types=fastio"/>
        <declare name="line1" string="universe=globus"/>
        <declare name="line2" string="executable=${tgrid_ogre_${site}}/bin/launch"/>
        <declare name="line2B" string="globusrsl = (${mxw})(max_memory=${maxmem})(environment=(OGRE_HOME ${tgrid_ogre_${site}}) (JAVA_HOME ${tgrid_java_${site}}) (ORACLE_BASE ${tgrid_oraclebase_${site}}) (ORACLE_HOME ${tgrid_oracle_${site}}))"/>
        <declare name="line4" string="transfer_executable=false"/>
        <declare name="line5" string="globusscheduler=${tgrid_jobserver_${site}}/${jobmanager_${site}}"/>
        <declare name="line10" string="queue"/>
        <declare name="end" long="$E{ ${ccd.stop} + 1 }"/>
        <!-- Getting the current number of condor jobs -->
        <stream-monitor-process execution-dir="${appbase}">
            <command-line>${condorq}</command-line>
            <out-monitor>
                <trigger>
                    <filter pattern="${currentuser}"/>
                    <actions>
                        <stream-file-write-action path="${appbase}/jobs/${uid}/condorq.out" append="false"/>
                    </actions>
                </trigger>
            </out-monitor>
            <err-monitor>
                <trigger>
                    <filter pattern=".*"/>
                    <actions>
                        <stream-file-write-action path="${appbase}/jobs/${uid}/condorq.err" append="false"/>
                    </actions>
                </trigger>
            </err-monitor>
        </stream-monitor-process>
        <sleep time="1000"/>
<!--
         <declare name="stacklevel" int="0"/>
         <read path="${appbase}/jobs/${uid}/condorq.out" lines="true"/>
         <return name="stacklevel" get="lineCount"/>
-->
        <declare name="lineCount" int="0"/>
        <declare name="stacklevel" int="0"/>
        <line-count path="${appbase}/jobs/${uid}/condorq.out">
            <return-value defaultName="lineCount" assignedName="stacklevel"/>
        </line-count>
        <echo stdout="true" message=" -- Condor stack currently has ${stacklevel} jobs"/>
        <declare name="i" int="0"/>
        <for var="i" from="${ccd.start}" condition="$E{${i} &lt; ${end}}">
            <declare name="in" long="0"/>
            <add-leading-zeros number="${i}" places="2">
                <return-value defaultName="zerosAdded" assignedName="in"/>
            </add-leading-zeros>
            <echo stdout="true" message=" -- Stage_runjobs loop : Writing ${uid}/${in}/${in}.condor for nite=${nite} "/>
            <declare name="line3" string="arguments=${project}_${in}.xml ${run.stage}"/>
            <declare name="line6" string="output=jobs/${uid}/${in}/${in}_condor.out"/>
            <declare name="line7" string="error=jobs/${uid}/${in}/${in}_condor.err"/>
            <declare name="line8" string="log=jobs/${uid}/${in}/${in}_condor.log"/>
            <declare name="line9" string="remote_initialdir=${tgrid_homepath_${site}}/${uid}_${in}/xml"/>
            <write-segments path="${appbase}/jobs/${uid}/${in}/${in}.condor">
                <segment lineBreaks="1">${line1}</segment>
                <segment lineBreaks="1">${line2}</segment>
                <segment lineBreaks="1">${line2B}</segment>
                <segment lineBreaks="1">${line3}</segment>
                <segment lineBreaks="1">${line4}</segment>
                <segment lineBreaks="1">${line5}</segment>
                <segment lineBreaks="1">${line6}</segment>
                <segment lineBreaks="1">${line7}</segment>
                <segment lineBreaks="1">${line8}</segment>
                <segment lineBreaks="1">${line9}</segment>
                <segment lineBreaks="1">${line10}</segment>
            </write-segments>
            <echo stdout="true" message=" -- --------------------"/>
            <echo stdout="true" message=" -- Submitting ${uid}/${in}/${in}.condor  "/>
<!--
            <stream-monitor-process execution-dir="${appbase}">
            <command-line>${condorsubmit} ${appbase}/jobs/${uid}/${in}/${in}.condor</command-line>
            <out-monitor>
               <trigger>
                  <filter pattern=".*"/>
                  <actions>
                     <stream-file-write-action path="${appbase}/jobs/${uid}/${in}/${in}.out" append="false"/>
                  </actions>
               </trigger>
            </out-monitor>
            <err-monitor>
               <trigger>
                  <filter pattern=".*"/>
                  <actions>
                     <stream-file-write-action path="${appbase}/jobs/${uid}/${in}/${in}.err" append="false"/>
                  </actions>
               </trigger>
            </err-monitor>
         </stream-monitor-process>
-->
            <sleep time="2800"/>
            <echo stdout="true" message=" -- ${in}: Let's wait a bit "/>
            <sleep time="2800"/>
        </for>
        <echo stdout="true" message=" -- --------------------"/>
        <declare name="linecount" int="500"/>
        <declare name="j" int="0"/>
        <for var="j" from="0" condition="$E{( ( ${j} &lt; 2800 ) &amp;&amp; ( ${linecount} &gt; ${stacklevel} ) )}">
            <sleep time="2800"/>
            <stream-monitor-process execution-dir="${appbase}">
                <command-line>${condorq}</command-line>
                <out-monitor>
                    <trigger>
                        <filter pattern="${currentuser}"/>
                        <actions>
                            <stream-file-write-action path="${appbase}/jobs/${uid}/${in}/condorq.out" append="false"/>
                        </actions>
                    </trigger>
                </out-monitor>
                <err-monitor>
                    <trigger>
                        <filter pattern=".*"/>
                        <actions>
                            <stream-file-write-action path="${appbase}/jobs/${uid}/${in}/condorq.err" append="false"/>
                        </actions>
                    </trigger>
                </err-monitor>
            </stream-monitor-process>
            <sleep time="2800"/>
<!--
      <read path="${appbase}/jobs/${uid}/${in}/condorq.out" lines="true"/>
      <return name="linecount" get="lineCount"/>
-->
            <declare name="lineCount" int="0"/>
            <line-count path="${appbase}/jobs/${uid}/${in}/condorq.out">
                <return-value defaultName="lineCount" assignedName="linecount"/>
            </line-count>
            <echo stdout="true" message="      -- Condor stack has ${linecount} jobs (${j})"/>
        </for>
        <echo stdout="true" message=" -- Condor Queue is clear. "/>
        <else>
            <echo stdout="true" message=" -- Running sequential jobs for ${project} pipeline"/>
            <declare name="end" long="$E{ ${ccd.stop} + 1 }"/>
            <declare name="i" int="0"/>
            <for var="i" from="${ccd.start}" condition="$E{${i} &lt; ${end}}">
                <echo stdout="true" message=" -- Processing CCD0${i}..."/>
                <echo stdout="true" message=" -- Processing ${ogre.launch} ${ogre.command}..."/>
                <stream-monitor-process execution-dir="${workplace}/${uid}">
                    <command-line>${ogre.launch} ${ogre.command}</command-line>
                    <out-monitor>
                        <trigger>
                            <filter pattern=".*"/>
                            <actions>
                                <stream-file-write-action path="${workplace}/${uid}/data/${nite}/log/OGRE.log" append="false"/>
                            </actions>
                        </trigger>
                    </out-monitor>
                    <err-monitor>
                        <trigger>
                            <filter pattern=".*"/>
                            <actions>
                                <stream-file-write-action path="${workplace}/${uid}/data/${nite}/log/OGRE.log" append="false"/>
                            </actions>
                        </trigger>
                    </err-monitor>
                </stream-monitor-process>
            </for>
        </else>
    </if>
    <echo stdout="true" message=" - Stage_runjobs done"/>
    <echo stdout="true" message=" "/>
    <send>
        <progress-event message="End Stage_runjobs">
            <header-property name="some-special-id" value="${ensemble.id}-Main-End-Stage_runjobs"/>
        </progress-event>
    </send>
</define>

