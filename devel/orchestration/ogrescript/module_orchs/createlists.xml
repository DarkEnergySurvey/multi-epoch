<define procedure="Stage_createlists" ARG_0="int">
    <properties file="${mypath}/module_orchs/createlists.properties"/>
    <env/>
    <properties sysprops="true"/>
    <send>
        <progress-event message="Begin Stage_createlists">
            <header-property name="some-special-id" value="${ensemble.id}-Main-Begin-Stage_createlists"/>
        </progress-event>
    </send>
    <echo stdout="true" message=" - Begin Stage_createlists"/>
    <declare name="end" long="$E{ ${ccd.stop} + 1 }"/>
    <declare name="i" int="0"/>
    <for var="i" from="${ccd.start}" condition="$E{${i} &lt; ${end}}">
        <declare name="in" long="0"/>
        <add-leading-zeros number="${i}" places="2">
            <return-value defaultName="zerosAdded" assignedName="in"/>
        </add-leading-zeros>
        <if>
            <equals first="${platform}" second="TG"/>
            <declare global="true" name="ina" string="${project}"/>
            <else>
                <declare global="true" name="list.dir" string="${workplace}/${uid}/data/${nite}/log"/>
                <mkdir uri="file:${sql.dir}"/>
            </else>
        </if>
        <echo stdout="true" message=" -- making lists for CCD ${in} (from ${ccd.start} to ${ccd.stop}) and for nite ${nite}"/>
        <if>
            <equals first="${platform}" second="TG"/>
            <declare global="true" name="list.dir" string="${local_listpath}/log"/>
            <echo stdout="true" message=" -- ${list.dir}"/>
            <echo stdout="true" message=" -- ${list.dir}/log"/>

            <delete dir="file:${list.dir}">
                <configuration>
                    <property name="delete-fail-on-error" value="false" type="boolean"/>
                </configuration>
            </delete>

            <mkdir uri="file:${list.dir}"/>
            <echo stdout="true" message=" -- The produced lists can be found in ${list.dir}"/>
            <else/>
        </if>
        <!-- create sql scripts -->
        <declare name="sql.bias" string="${sql.dir}/outbias_${nite}.dat"/>
        <declare name="sql.flat" string="${sql.dir}/outflat_${nite}.dat"/>
        <declare name="sql.science" string="${sql.dir}/outscience_${nite}.dat"/>
        <echo stdout="true" message=" -- ${list.sql}"/>
        <write-segments path="${list.sql}" append="true">
            <segment lineBreaks="1">SET ECHO OFF NEWP 0 SPA 1 PAGES 0 FEED OFF HEAD OFF TRIMS ON LINESIZE 1000;</segment>
            <segment lineBreaks="1">SPOOL ${sql.bias};</segment>
            <segment lineBreaks="1">select count(*) from Files where (upper(IMAGETYPE) like '%ZERO%' or upper(IMAGETYPE) like '%BIAS%') and CCD_NUMBER = ${i} and NITE like '${nite}';</segment>
            <segment lineBreaks="1">select IMAGENAME,band,ccd_number,imagetype from Files where (upper(IMAGETYPE) like '%ZERO%' or upper(IMAGETYPE) like '%BIAS%') and CCD_NUMBER = ${i} and NITE like '${nite}';</segment>
            <segment lineBreaks="1">SPOOL off;</segment>
            <segment lineBreaks="1">SET ECHO OFF NEWP 0 SPA 1 PAGES 0 FEED OFF HEAD OFF TRIMS ON LINESIZE 1000;</segment>
            <segment lineBreaks="1">SPOOL ${sql.flat};</segment>
            <segment lineBreaks="1">select count(*) from Files where upper(IMAGETYPE) like '%FLAT%' and CCD_NUMBER = ${i} and NITE like '${nite}';</segment>
            <segment lineBreaks="1">select IMAGENAME,band,CCD_NUMBER,imagetype from Files where upper(IMAGETYPE) like '%FLAT%' and CCD_NUMBER = ${i} and NITE like '${nite}';</segment>
            <segment lineBreaks="1">SPOOL off;</segment>
            <segment lineBreaks="1">SET ECHO OFF NEWP 0 SPA 1 PAGES 0 FEED OFF HEAD OFF TRIMS ON LINESIZE 1000;</segment>
            <segment lineBreaks="1">SPOOL ${sql.science};</segment>
            <segment lineBreaks="1">select count(*) from Files where upper(IMAGETYPE) like '%OBJECT%' and CCD_NUMBER = ${i} and NITE like '${nite}';</segment>
            <segment lineBreaks="1">select IMAGENAME,band,CCD_NUMBER,imagetype from Files where upper(IMAGETYPE) like '%OBJECT%' and CCD_NUMBER = ${i} and NITE like '${nite}';</segment>
            <segment lineBreaks="1">SPOOL off;</segment>
            <segment lineBreaks="1">quit</segment>
        </write-segments>
        <!-- run database query  -->
        <echo stdout="true" message=" ---- ${sql.exec} ${sql.command}"/>
        <declare name="sql.script" string="${list.sql}"/>
        <stream-monitor-process execution-dir=".">
            <command-line>${sql.exec} ${sql.command}</command-line>
        </stream-monitor-process>
        <!-- create lists for bias -->
        <declare name="sql.out" string="${sql.dir}/outbias_${nite}.dat"/>
        <echo stdout="true" message=" ---- ${createlist.exec} ${createlist.args}"/>
        <stream-monitor-process execution-dir=".">
            <command-line>${createlist.exec} ${createlist.args}</command-line>
            <out-monitor>
                <trigger>
                    <filter pattern=".*"/>
                    <actions>
                        <stream-file-write-action path="${createlist.log}" append="false"/>
                    </actions>
                </trigger>
            </out-monitor>
        </stream-monitor-process>
        <delete dir="file:${sql.out}">
            <configuration>
                <property name="delete-fail-on-error" value="false" type="boolean"/>
            </configuration>
        </delete>
        <echo stdout="true" message=" -- lists created for bias images"/>
        <!-- create lists for flats -->
        <assign name="sql.out" string="${sql.dir}/outflat_${nite}.dat"/>
        <stream-monitor-process execution-dir=".">
            <command-line>${createlist.exec} ${createlist.args}</command-line>
            <out-monitor>
                <trigger>
                    <filter pattern=".*"/>
                    <actions>
                        <stream-file-write-action path="${createlist.log}" append="false"/>
                    </actions>
                </trigger>
            </out-monitor>
        </stream-monitor-process>
        <delete dir="file:${sql.out}">
            <configuration>
                <property name="delete-fail-on-error" value="false" type="boolean"/>
            </configuration>
        </delete>
        <echo stdout="true" message=" -- lists created for flat images"/>
        <!-- create lists for science -->
        <assign name="sql.out" string="${sql.dir}/outscience_${nite}.dat"/>
        <stream-monitor-process execution-dir=".">
            <command-line>${createlist.exec} ${createlist.args}</command-line>
            <out-monitor>
                <trigger>
                    <filter pattern=".*"/>
                    <actions>
                        <stream-file-write-action path="${createlist.log}" append="false"/>
                    </actions>
                </trigger>
            </out-monitor>
        </stream-monitor-process>
        <delete dir="file:${sql.out}">
            <configuration>
                <property name="delete-fail-on-error" value="false" type="boolean"/>
            </configuration>
        </delete>
        <echo stdout="true" message=" -- lists created for science images"/>
    </for>
    <echo stdout="true" message=" - Stage_createlists done"/>
    <echo stdout="true" message="     "/>
    <send>
        <progress-event message="End Stage_createlists">
            <header-property name="some-special-id" value="${ensemble.id}-Main-End-Stage_createlists"/>
        </progress-event>
    </send>
</define>

